package org.example.studentdistributionbot.commands.apply_controller;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.studentdistributionbot.BotState;
import org.example.studentdistributionbot.Command;
import org.example.studentdistributionbot.UserContextStorage;
import org.example.studentdistributionbot.client.UserRoleResolverClient;
import org.example.studentdistributionbot.client.apply_controller.GetApplyClient;
import org.example.studentdistributionbot.commands.BotCommandHandler;
import org.example.studentdistributionbot.dto.ApplyResponseDto;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.generics.TelegramClient;

import java.util.List;

@Component
@RequiredArgsConstructor
@Slf4j
public class GetApplyCommandHandler implements BotCommandHandler {

    private final GetApplyClient getApplyClient;
    private final UserContextStorage userContextStorage;
    private final UserRoleResolverClient userRoleResolverClient;

    @Override
    public Command getCommand() {
        return Command.GET_APPLY;
    }

    @Override
    public void handleCommand(Update update, TelegramClient client) throws TelegramApiException {
        var role = userRoleResolverClient.getUserRole(update.getMessage().getFrom().getId());
        if (!role.getRole().equals("ADMIN")) {
            return;
        }
        userContextStorage.setState(update.getMessage().getChatId(), BotState.WAITING_APPLY_FILTERS);
        sendMessage(update.getMessage().getChatId(), client, """
                –í–≤–µ–¥–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã {status}(PENDING/APPROVED/REJECTED) {groupName} {isuNumber}
                - –µ—Å–ª–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                """);
    }

    public void doRequest(Update update, TelegramClient client, String[] filters) throws TelegramApiException {
        List<ApplyResponseDto> response = null;
        if (filters.length == 0) {
            response = getApplyClient.getApplies(null, null, null);
        } else if (filters.length == 1) {
            response = getApplyClient.getApplies(filters[0], null, null);
        } else if (filters.length == 2) {
            response = getApplyClient.getApplies(filters[0], filters[1], null);
        } else if (filters.length == 3) {
            response = getApplyClient.getApplies(filters[0], filters[1], filters[2]);
        } else {
            sendMessage(update.getMessage().getChatId(), client, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—ã: {status} {groupName} {isuNumber}");
        }
        sendMessage(update.getMessage().getChatId(), client, formatApplicationsAsText(response));
    }

    private String formatApplicationsAsText(List<ApplyResponseDto> applications) {
        if (applications == null || applications.isEmpty()) {
            return "‚ùóÔ∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.";
        }

        StringBuilder sb = new StringBuilder("üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:\n\n");

        for (ApplyResponseDto app : applications) {
            sb.append("ID: ").append(app.getId()).append("\n")
                    .append("–°—Ç–∞—Ç—É—Å: ").append(app.getStatus()).append("\n")
                    .append("check status: ").append(app.getCheckStatus()).append("\n")
                    .append("ISU: ").append(app.getIsuNumber()).append("\n")
                    .append("–§–ò–û: ").append(app.getStudentName()).append("\n")
                    .append("–ì—Ä—É–ø–ø–∞: ").append(app.getGroupNumber()).append("\n")
                    .append("–ò–ù–ù: ").append(app.getId()).append("\n")
                    .append("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ").append(app.getOrganisationName()).append("\n")
                    .append("–õ–æ–∫–∞—Ü–∏—è: ").append(app.getLocation()).append("\n")
                    .append("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å").append(app.getSupervisorName()).append("\n")
                    .append("–ü–æ—á—Ç–∞: ").append(app.getMail()).append("\n")
                    .append("–¢–µ–ª–µ—Ñ–æ–Ω: ").append(app.getPhone()).append("\n")
                    .append("–¢–∏–ø –ø—Ä–∞–∫—Ç–∏–∫–∏: ").append(app.getPracticeType()).append("\n")
                    .append("-----------------------------\n");
        }

        return sb.toString();
    }

}
